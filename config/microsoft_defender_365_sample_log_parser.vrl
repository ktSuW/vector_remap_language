.puuid = uuid_v4()

.original_event = if exists(.message) {
    parse_json!(.message)
} else {
    {}
}
# .original_event = parse_json!(.message)

.tenan_id = .original_event.tenantId

# #========= alert Info 
# .alert_info = flatten!(.original_event.alertInfo)
# # key is set to current key, value is set to corresponding value, first dot . tells set!() to modify the root object
# for_each(.alert_info) -> |key, value| {
#     . = set!(., ["alert_info_" + key], value)
# }
# del(.alert_info)

# #========= Investigation
# .investigation = flatten!(.original_event.investigation)
# for_each(.investigation) -> |key, value| {
#   . = set!(., ["investigation_" + key], value)
# }
# del(.investigation )

# #========= Entities 
# #========= User defined VRL functions is yet to be available. Hence, it is not DRY.
# #========= https://github.com/vectordotdev/vrl/issues/47
# .entities_devices_array = .original_event.entities.devices
# .entities_devices_id = []
# .entities_devices_id = map_values(array(.entities_devices_array) ?? []) -> |device| {
#   device.deviceId
# }
# del(..entities_devices_array)

# .entities_devices_platform = []
# .entities_devices_platform = map_values(array(.entities_devices_array) ?? []) -> |device| {
#   device.info.os.platform
# }

# .entities_devices_risAssessment_score = []
# .entities_devices_risAssessment_score = map_values(array(.entities_devices_array) ?? []) -> |device| {
#   device.info.riskAssessment.score
# }

# .entities_devices_security_defenderAvStatus = []
# .entities_devices_security_defenderAvStatus = map_values(array(.entities_devices_array) ?? []) -> |device| {
#   device.info.security.defenderAvStatus
# }

#========= Evidence - processes
# .processes_array = flatten!(.original_event.evidence.processes)
# .processes_name = []
# .processes_name = map_values(array(.processes_array) ?? []) -> |process| {
#   if (exists(process.name) && process.name != ""){
#     process.name
#   } else {
#     "unknown process name"
#   }
# }


# .processes_commandline = []
# .processes_commandline  = map_values(array(.processes_array) ?? []) -> |process| {
#   if (exists(process.commandLine) && process.commandLine != ""){
#     process.commandLine
#   } else {
#     "unknown commandLine"
#   }
# }

# .processes_parentProcess = []
# .processes_parentProcess  = map_values(array(.processes_array) ?? []) -> |process| {
#   if (exists(process.parentProcess) && process.parentProcess != ""){
#     process.parentProcess
#   } else {
#     "unknown parentProcess"
#   }
# } 


#========= Evidence - network
# .network_array = if exists(.original_event.evidence.network) {
#     flatten!(.original_event.evidence.network)
# } else {
#     []
# }
.network_array = .original_event.evidence.network

.network_application = []
.network_application = map_values(array(.network_array) ?? []) -> |network| {
  if (exists(network.application) && network.application != ""){
    network.application
  } else {
    "unknown network application"
  }
}

.network_connection_source_address = []
.network_connection_source_address = map_values(array(.network_array) ?? []) -> |network| {
  if (exists(network.connection) && network.connection != ""){
    network.connection.source.address
  } else {
    "unknown network connection source connection"
  }
}
.network_connection_source_address = unique(.network_connection_source_address)

.network_connection_source_port = []
.network_connection_source_port = map_values(array(.network_array) ?? []) -> |network| {
  if (exists(network.connection) && network.connection != ""){
    network.connection.source.port
  } else {
    "unknown network connection source port"
  }
}
.network_connection_source_port = unique(.network_connection_source_port)

.network_connection_destination_address = []
.network_connection_destination_address = map_values(array(.network_array) ?? []) -> |network| {
  if (exists(network.connection) && network.connection != ""){
    network.connection.destination.address
  } else {
    "unknown network connection destination connection"
  }
}
.network_connection_destination_address = unique(.network_connection_destination_address)

.network_connection_destination_port = []
.network_connection_destination_port = map_values(array(.network_array) ?? []) -> |network| {
  if (exists(network.connection) && network.connection != ""){
    network.connection.destination.port
  } else {
    "unknown network connection destination port"
  }
}
.network_connection_destination_port = unique(.network_connection_destination_port)

.url_original = []
.url_original = map_values(array(.network_array) ?? []) -> |network| {
  if (exists(network.uri) && network.uri != ""){
    parse_url!(network.uri ,default_known_ports: true)
  } else {
    "unknown network uri"
  }
}

.url_registered_domain = []
.url_registered_domain, err = map_values(array(.network_array) ?? []) -> |network| {
  if (exists(network.uri) && network.uri != "") {
    parsed = parse_url!(network.uri, default_known_ports: true) 
    if exists(parsed.host) {
      parts = split(parsed.host, ".")
      if length(parts) >= 2 {
        parts[-2] + "." + parts[-1]
      } else {
        parsed.host
      }
    } else {
      "unknown domain"
    }
  } else {
    "unknown domain"
  }
}

.url_top_level_domain = []
.url_top_level_domain = map_values(array(.network_array) ?? []) -> |network| {
  if (exists(network.uri) && network.uri != "") {
    parsed = parse_url!(network.uri, default_known_ports: true) 
    if exists(parsed.host) {
      parts = split(parsed.host, ".")
      parts[-1]
    } else {
      "unknown domain"
    }
  } else {
    "unknown domain"
  }
}

.url_top_level_domain = []
.url_top_level_domain = map_values(array(.network_array) ?? []) -> |network| {
  if (exists(network.uri) && network.uri != "") {
    parsed = parse_url!(network.uri, default_known_ports: true) 
    if exists(parsed.host) {
      parts = split(parsed.host, ".")
      parts[-1]
    } else {
      "unknown top level domain"
    }
  } else {
    "unknown top level domain"
  }
}

.url_content_path = []
.url_content_path = map_values(array(.network_array) ?? []) -> |network| {
  if (exists(network.uri) && network.uri != "") {
    parsed = parse_url!(network.uri, default_known_ports: true) 
    if exists(parsed.path) {
      parts_path = parsed.path
    } else {
      "No content path"
    }
  } else {
    "No content path"
  }
}



#======= URL, URI parts
# https://blog.hubspot.com/marketing/parts-url
# https://blog.hubspot.com/marketing/parts-url
# https://vector.dev/docs/reference/vrl/functions/#compact
# https://www.youtube.com/watch?v=F2FmTdLtb_4



#========= DELETE unwanted fields 
del(.message)
del(.original_event)
del(.processes_array)
del(.network_array)
